package modelo;
// Generated 22/08/2015 09:16:36 PM by Hibernate Tools 4.3.1


import controlador.Padre;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;

/**
 * Usuarios generated by hbm2java
 */
public class Usuarios extends Padre implements java.io.Serializable {


     private Integer idUsuario;
     private String username;
     private String password;
     private String tipo;
     private Set proyectoses = new HashSet(0);
     private Set faseses = new HashSet(0);

    public Usuarios() {
    }

	
    public Usuarios(String username, String password) {
        this.username = username;
        this.password = password;
    }
    public Usuarios(String username, String password, String tipo, Set proyectoses, Set faseses) {
       this.username = username;
       this.password = password;
       this.tipo = tipo;
       this.proyectoses = proyectoses;
       this.faseses = faseses;
    }
   
    public Integer getIdUsuario() {
        return this.idUsuario;
    }
    
    public void setIdUsuario(Integer idUsuario) {
        this.idUsuario = idUsuario;
    }
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getTipo() {
        return this.tipo;
    }
    
    public void setTipo(String tipo) {
        this.tipo = tipo;
    }
    public Set getProyectoses() {
        return this.proyectoses;
    }
    
    public void setProyectoses(Set proyectoses) {
        this.proyectoses = proyectoses;
    }
    public Set getFaseses() {
        return this.faseses;
    }
    
    public void setFaseses(Set faseses) {
        this.faseses = faseses;
    }

    public void addProyecto(Proyectos proyecto){
        this.proyectoses.add(proyecto);
    }

    public void addFase(Fases fase){
        this.faseses.add(fase);
    }
    
    public Fases getFase(int idFase){
        
        try {
            
            Object[] fases = this.faseses.toArray();
            
           for(int x=0;x<this.faseses.size();x++){
               Fases fase =  (Fases) fases[x];
               
               if(fase.getIdFase()==idFase){
                   return fase;
               }
               
           }
           
          
             return null;
            
        } catch (Exception e) {
            return null;
        }
        
    }
    public Proyectos getProyecto(int idProyecto){
        
        try {
            
            Object[] proyectos = this.proyectoses.toArray();
            
           for(int x=0;x<this.proyectoses.size();x++){
               Proyectos proyecto =  (Proyectos) proyectos[x];
               
               if(proyecto.getIdProyecto()==idProyecto){
                   return proyecto;
               }
               
           }
           
          
             return null;
            
        } catch (Exception e) {
            return null;
        }
        
    }
    
    public Vector<Proyectos> getVectorProyectos(){
        try {
                 
           Object[] proyectos = this.proyectoses.toArray();
           Vector<Proyectos> vector = new Vector();
           
           for(int x =0; x<this.proyectoses.size();x++){
               Proyectos pro = (Proyectos) proyectos[x];
              vector.add(pro);
           }
           
           return vector;
           
            
        } catch (Exception e) {
           
            return null;
        }
    }
     public Vector<Fases> getVectorFases(){
        try {
                 
           Object[] fases = this.faseses.toArray();
           Vector<Fases> vector = new Vector();
           
           for(int x =0; x<this.faseses.size();x++){
               Fases fase = (Fases) fases[x];
              vector.add(fase);
           }
           
           return vector;
           
            
        } catch (Exception e) {
           
            return null;
        }
    }
    
    
}


